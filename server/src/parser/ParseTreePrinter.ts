import { CommonTokenStream, InputStream } from "antlr4";
import { P4Lexer } from "../antlr_autogenerated/P4Lexer";
import { P4Parser } from "../antlr_autogenerated/P4Parser";
import ASTBuilderListener from "./ASTBuilderListener";
import { ParseTreeWalker } from "antlr4/tree";
import ASTNode from "./ASTNode";

import { P4Listener } from "../antlr_autogenerated/P4Listener";
const s = new Set<any>();

class ParseTreePrinter extends P4Listener {
  private offset = 0;
  enterEveryRule(ctx) {
    this.offset++;
    if (s.has(ctx) === false) {
      console.log(" ".repeat(this.offset) + ctx.constructor.name);
    }
    s.add(ctx);
  }

  exitEveryRule(ctx) {
    this.offset--;
  }
}

export default function printParseTree(input: string): void {
  const chars = new InputStream(input);
  const lexer = new P4Lexer(chars);
  const tokens = new CommonTokenStream(lexer);
  const parser = new P4Parser(tokens);
  const tree = parser.program();
  ParseTreeWalker.DEFAULT.walk(new ParseTreePrinter(), tree);
}

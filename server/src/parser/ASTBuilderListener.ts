import { P4Listener } from "../antlr_autogenerated/P4Listener";
import {
  ConstantDeclarationContext,
  ProgramContext,
} from "../antlr_autogenerated/P4Parser";
import ASTNode, { BlockScopeNode, IdentifierNode } from "./ASTNode";

const getContextPositionData = (ctx) => ({
  line: ctx.start.line,
  start: ctx.start.start,
  end: ctx.stop.stop,
});

export default class ASTBuilderListener extends P4Listener {
  private nodeStack: ASTNode[] = [];

  getTree() {
    return this.nodeStack.pop();
  }

  peek() {
    return this.nodeStack[this.nodeStack.length - 1];
  }

  enterProgram(ctx: ProgramContext) {
    const node = new BlockScopeNode("Program", getContextPositionData(ctx));
    this.nodeStack.push(node);
  }

  setChildParentRelationship(node: ASTNode) {
    this.peek().addChild(node);
    node.setParent(this.peek());
  }

  enterPpIncludeFileName(ctx) {
    const node = new ASTNode("Include Filename", getContextPositionData(ctx));

    this.nodeStack.push(node);
  }

  exitPpIncludeFileName() {
    this.nodeStack.pop();
  }

  enterHeaderTypeDeclaration(ctx) {
    const node = new ASTNode(
      "Header Type Declaration",
      getContextPositionData(ctx)
    );
    this.setChildParentRelationship(node);
    this.nodeStack.push(node);
  }

  exitHeaderTypeDeclaration(ctx) {
    this.nodeStack.pop();
  }

  enterName(ctx) {
    // this.peek().addChild(new ASTNode(ctx.getText()));
  }

  enterInitializer(ctx) {
    const node = new ASTNode(ctx.getText(), getContextPositionData(ctx));
    this.setChildParentRelationship(node);
  }

  enterTypeName(ctx) {
    //this.peek().addChild(new ASTNode(ctx.getText()));
  }

  enterBaseType(ctx) {
    const node = new ASTNode(ctx.getText(), getContextPositionData(ctx));
    this.setChildParentRelationship(node);
  }

  enterStructTypeDeclaration(ctx) {
    const node = new ASTNode(
      "Struct Type Declaration",
      getContextPositionData(ctx)
    );
    this.setChildParentRelationship(node);
    this.nodeStack.push(node);
  }

  exitStructTypeDeclaration(ctx) {
    this.nodeStack.pop();
  }

  enterConstantDeclaration(ctx: ConstantDeclarationContext) {
    const node = new ASTNode(
      "ConstantDeclaration",
      getContextPositionData(ctx)
    );
    this.setChildParentRelationship(node);
    this.nodeStack.push(node);
  }

  exitConstantDeclaration(ctx) {
    this.nodeStack.pop();
  }

  enterStructField(ctx) {
    const node = new ASTNode("StructField", getContextPositionData(ctx));
    this.setChildParentRelationship(node);
    this.nodeStack.push(node);
  }

  exitStructField(ctx) {
    this.nodeStack.pop();
  }

  enterControlDeclaration(ctx) {
    const node = new BlockScopeNode(
      "ControlDeclaration",
      getContextPositionData(ctx)
    );
    this.setChildParentRelationship(node);
    this.nodeStack.push(node);
  }

  exitControlDeclaration(ctx) {
    this.nodeStack.pop();
  }

  enterParameterList(ctx) {
    const node = new ASTNode("ParameterList", getContextPositionData(ctx));
    this.setChildParentRelationship(node);
    this.nodeStack.push(node);
  }

  exitParameterList(ctx) {
    this.nodeStack.pop();
  }

  enterParameter(ctx) {
    const node = new ASTNode("Parameter", getContextPositionData(ctx));
    this.setChildParentRelationship(node);
    this.nodeStack.push(node);
  }

  exitParameter() {
    this.nodeStack.pop();
  }

  enterDirection(ctx) {
    const node = new ASTNode(ctx.getText(), getContextPositionData(ctx));
    this.setChildParentRelationship(node);
  }

  enterActionDeclaration(ctx) {
    const node = new ASTNode("ActionDeclaration", getContextPositionData(ctx));
    this.setChildParentRelationship(node);
    this.nodeStack.push(node);
  }

  exitActionDeclaration() {
    this.nodeStack.pop();
  }

  enterBlockStatement(ctx) {
    const node = new ASTNode("Block", getContextPositionData(ctx));
    this.setChildParentRelationship(node);
    this.nodeStack.push(node);
  }

  exitBlockStatement() {
    this.nodeStack.pop();
  }

  enterAssignmentOrMethodCallStatement(ctx) {
    const node = new ASTNode(
      "AssignmentOrMethodCall",
      getContextPositionData(ctx)
    );
    this.setChildParentRelationship(node);
    this.nodeStack.push(node);
  }

  exitAssignmentOrMethodCallStatement() {
    this.nodeStack.pop();
  }

  enterTableDeclaration(ctx) {
    const node = new ASTNode("TableDeclaration", getContextPositionData(ctx));
    this.setChildParentRelationship(node);
    this.nodeStack.push(node);
  }

  exitTableDeclaration() {
    this.nodeStack.pop();
  }

  enterTableProperty(ctx) {
    const node = new ASTNode("TableProperty", getContextPositionData(ctx));
    this.setChildParentRelationship(node);
    this.nodeStack.push(node);
  }
  exitTableProperty() {
    this.nodeStack.pop();
  }

  enterKeyElement(ctx) {
    const node = new ASTNode("KeyElement", getContextPositionData(ctx));
    this.setChildParentRelationship(node);
    this.nodeStack.push(node);
  }

  exitKeyElement() {
    this.nodeStack.pop();
  }

  enterActionRef(ctx) {
    const node = new ASTNode("ActionRef", getContextPositionData(ctx));
    this.setChildParentRelationship(node);
    this.nodeStack.push(node);
  }

  exitActionRef() {
    this.nodeStack.pop();
  }

  enterControlBody(ctx) {
    const node = new ASTNode("ControlBody", getContextPositionData(ctx));
    this.setChildParentRelationship(node);
    this.nodeStack.push(node);
  }

  exitControlBody() {
    this.nodeStack.pop();
  }

  enterVariableDeclaration(ctx) {
    const node = new ASTNode(
      "VariableDeclaration",
      getContextPositionData(ctx)
    );
    this.setChildParentRelationship(node);
    this.nodeStack.push(node);
  }

  exitVariableDeclaration() {
    this.nodeStack.pop();
  }

  enterDirectApplication(ctx) {
    const node = new ASTNode("DirectApplication", getContextPositionData(ctx));
    this.setChildParentRelationship(node);
    this.nodeStack.push(node);
  }

  exitDirectApplication() {
    this.nodeStack.pop();
  }

  enterExpression(ctx) {
    const node = new ASTNode("Expression", getContextPositionData(ctx));
    this.setChildParentRelationship(node);
    this.nodeStack.push(node);
  }

  exitExpression() {
    this.nodeStack.pop();
  }

  enterNonTypeName(ctx) {
    //const node = new ASTNode(ctx.getText());
    //this.peek().addChild(node);
  }

  enterPrefixedType(ctx) {
    //const node = new ASTNode("prefixed " + ctx.getText());
    //this.peek().addChild(node);
  }

  enterTypedefDeclaration(ctx) {
    const node = new ASTNode("TypeDeclaration", getContextPositionData(ctx));
    this.setChildParentRelationship(node);
    this.nodeStack.push(node);
  }

  exitTypedefDeclaration(ctx) {
    this.nodeStack.pop();
  }

  enterType_or_id(ctx) {
    const node = new IdentifierNode(ctx.getText(), getContextPositionData(ctx));
    this.setChildParentRelationship(node);
  }

  enterLvalue(ctx) {
    let type = "unknown L Value";
    if (ctx.children.length > 1) {
      const token = ctx.children[1].getText();
      if (token === ".") {
        type = "PropertyAccess";
      }
    } else if (ctx.children.length === 1) {
      type = "PrefixedNonTypeName";
    }
    const node = new ASTNode(type, getContextPositionData(ctx));
    this.setChildParentRelationship(node);
    this.nodeStack.push(node);
  }

  exitLvalue(ctx) {
    this.nodeStack.pop();
  }
}
